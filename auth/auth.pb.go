// Code generated by protoc-gen-go. DO NOT EDIT.
// source: auth.proto

package auth

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bbd6f3875b0e874, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type PublicKey struct {
	Pem                  []byte   `protobuf:"bytes,1,opt,name=pem,proto3" json:"pem,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublicKey) Reset()         { *m = PublicKey{} }
func (m *PublicKey) String() string { return proto.CompactTextString(m) }
func (*PublicKey) ProtoMessage()    {}
func (*PublicKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bbd6f3875b0e874, []int{1}
}

func (m *PublicKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicKey.Unmarshal(m, b)
}
func (m *PublicKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicKey.Marshal(b, m, deterministic)
}
func (m *PublicKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicKey.Merge(m, src)
}
func (m *PublicKey) XXX_Size() int {
	return xxx_messageInfo_PublicKey.Size(m)
}
func (m *PublicKey) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicKey.DiscardUnknown(m)
}

var xxx_messageInfo_PublicKey proto.InternalMessageInfo

func (m *PublicKey) GetPem() []byte {
	if m != nil {
		return m.Pem
	}
	return nil
}

type Login struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Login) Reset()         { *m = Login{} }
func (m *Login) String() string { return proto.CompactTextString(m) }
func (*Login) ProtoMessage()    {}
func (*Login) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bbd6f3875b0e874, []int{2}
}

func (m *Login) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Login.Unmarshal(m, b)
}
func (m *Login) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Login.Marshal(b, m, deterministic)
}
func (m *Login) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Login.Merge(m, src)
}
func (m *Login) XXX_Size() int {
	return xxx_messageInfo_Login.Size(m)
}
func (m *Login) XXX_DiscardUnknown() {
	xxx_messageInfo_Login.DiscardUnknown(m)
}

var xxx_messageInfo_Login proto.InternalMessageInfo

func (m *Login) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Login) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type Token struct {
	Uuid                 string               `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	IssuedAt             *timestamp.Timestamp `protobuf:"bytes,2,opt,name=issuedAt,proto3" json:"issuedAt,omitempty"`
	ExpiresAt            *timestamp.Timestamp `protobuf:"bytes,3,opt,name=expiresAt,proto3" json:"expiresAt,omitempty"`
	Username             string               `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	Name                 string               `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Mail                 string               `protobuf:"bytes,6,opt,name=mail,proto3" json:"mail,omitempty"`
	Roles                []string             `protobuf:"bytes,7,rep,name=roles,proto3" json:"roles,omitempty"`
	Renewed              uint32               `protobuf:"varint,8,opt,name=renewed,proto3" json:"renewed,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Token) Reset()         { *m = Token{} }
func (m *Token) String() string { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()    {}
func (*Token) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bbd6f3875b0e874, []int{3}
}

func (m *Token) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Token.Unmarshal(m, b)
}
func (m *Token) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Token.Marshal(b, m, deterministic)
}
func (m *Token) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Token.Merge(m, src)
}
func (m *Token) XXX_Size() int {
	return xxx_messageInfo_Token.Size(m)
}
func (m *Token) XXX_DiscardUnknown() {
	xxx_messageInfo_Token.DiscardUnknown(m)
}

var xxx_messageInfo_Token proto.InternalMessageInfo

func (m *Token) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Token) GetIssuedAt() *timestamp.Timestamp {
	if m != nil {
		return m.IssuedAt
	}
	return nil
}

func (m *Token) GetExpiresAt() *timestamp.Timestamp {
	if m != nil {
		return m.ExpiresAt
	}
	return nil
}

func (m *Token) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Token) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Token) GetMail() string {
	if m != nil {
		return m.Mail
	}
	return ""
}

func (m *Token) GetRoles() []string {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *Token) GetRenewed() uint32 {
	if m != nil {
		return m.Renewed
	}
	return 0
}

type SignedToken struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignedToken) Reset()         { *m = SignedToken{} }
func (m *SignedToken) String() string { return proto.CompactTextString(m) }
func (*SignedToken) ProtoMessage()    {}
func (*SignedToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bbd6f3875b0e874, []int{4}
}

func (m *SignedToken) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignedToken.Unmarshal(m, b)
}
func (m *SignedToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignedToken.Marshal(b, m, deterministic)
}
func (m *SignedToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedToken.Merge(m, src)
}
func (m *SignedToken) XXX_Size() int {
	return xxx_messageInfo_SignedToken.Size(m)
}
func (m *SignedToken) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedToken.DiscardUnknown(m)
}

var xxx_messageInfo_SignedToken proto.InternalMessageInfo

func (m *SignedToken) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func init() {
	proto.RegisterType((*Empty)(nil), "auth.Empty")
	proto.RegisterType((*PublicKey)(nil), "auth.PublicKey")
	proto.RegisterType((*Login)(nil), "auth.Login")
	proto.RegisterType((*Token)(nil), "auth.Token")
	proto.RegisterType((*SignedToken)(nil), "auth.SignedToken")
}

func init() { proto.RegisterFile("auth.proto", fileDescriptor_8bbd6f3875b0e874) }

var fileDescriptor_8bbd6f3875b0e874 = []byte{
	// 358 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x51, 0xcb, 0x4a, 0xf3, 0x40,
	0x14, 0x26, 0x6d, 0xd2, 0x36, 0x27, 0xfd, 0xf9, 0x75, 0xe8, 0x22, 0x04, 0xc4, 0x12, 0x37, 0x05,
	0x35, 0x85, 0x0a, 0xe2, 0x4e, 0xba, 0x10, 0x17, 0xba, 0x90, 0x58, 0xdd, 0xa7, 0xe6, 0x34, 0x1d,
	0x4c, 0x32, 0x61, 0x2e, 0xd4, 0x2e, 0x7d, 0x37, 0x1f, 0x4c, 0x32, 0xd3, 0xb4, 0x6a, 0x11, 0x77,
	0xdf, 0xed, 0xcc, 0x9c, 0x0b, 0x40, 0xa2, 0xe4, 0x32, 0xaa, 0x38, 0x93, 0x8c, 0xd8, 0x35, 0x0e,
	0x8e, 0x33, 0xc6, 0xb2, 0x1c, 0xc7, 0x5a, 0x9b, 0xab, 0xc5, 0x58, 0xd2, 0x02, 0x85, 0x4c, 0x8a,
	0xca, 0xc4, 0xc2, 0x2e, 0x38, 0x37, 0x45, 0x25, 0xd7, 0xe1, 0x11, 0xb8, 0x0f, 0x6a, 0x9e, 0xd3,
	0x97, 0x3b, 0x5c, 0x93, 0x03, 0x68, 0x57, 0x58, 0xf8, 0xd6, 0xd0, 0x1a, 0xf5, 0xe3, 0x1a, 0x86,
	0xd7, 0xe0, 0xdc, 0xb3, 0x8c, 0x96, 0x24, 0x80, 0x9e, 0x12, 0xc8, 0xcb, 0xa4, 0x40, 0xed, 0xbb,
	0xf1, 0x96, 0xd7, 0x5e, 0x95, 0x08, 0xb1, 0x62, 0x3c, 0xf5, 0x5b, 0xc6, 0x6b, 0x78, 0xf8, 0xde,
	0x02, 0x67, 0xc6, 0x5e, 0xb1, 0x24, 0x04, 0x6c, 0xa5, 0x68, 0xba, 0xa9, 0xd6, 0x98, 0x5c, 0x42,
	0x8f, 0x0a, 0xa1, 0x30, 0x9d, 0x4a, 0x5d, 0xe9, 0x4d, 0x82, 0xc8, 0xb4, 0x1e, 0x35, 0xad, 0x47,
	0xb3, 0xa6, 0xf5, 0x78, 0x9b, 0x25, 0x57, 0xe0, 0xe2, 0x5b, 0x45, 0x39, 0x8a, 0xa9, 0xf4, 0xdb,
	0x7f, 0x16, 0xee, 0xc2, 0xdf, 0xe6, 0xb0, 0x7f, 0xcc, 0x41, 0xc0, 0xd6, 0xba, 0x63, 0x3a, 0x6c,
	0xb4, 0x22, 0xa1, 0xb9, 0xdf, 0x31, 0x5a, 0x8d, 0xc9, 0x00, 0x1c, 0xce, 0x72, 0x14, 0x7e, 0x77,
	0xd8, 0x1e, 0xb9, 0xb1, 0x21, 0xc4, 0x87, 0x2e, 0xc7, 0x12, 0x57, 0x98, 0xfa, 0xbd, 0xa1, 0x35,
	0xfa, 0x17, 0x37, 0x34, 0x3c, 0x01, 0xef, 0x91, 0x66, 0x25, 0xa6, 0x66, 0x11, 0x03, 0x70, 0x64,
	0x0d, 0x36, 0x9b, 0x30, 0x64, 0xf2, 0x61, 0x81, 0x3d, 0x55, 0x72, 0x49, 0xce, 0xa0, 0x7f, 0x8b,
	0x72, 0x77, 0x14, 0x2f, 0xd2, 0xe7, 0xd5, 0xe7, 0x0a, 0xfe, 0x1b, 0xb2, 0x73, 0x4f, 0xc1, 0xd5,
	0x07, 0x7a, 0x12, 0xc8, 0x9b, 0xa8, 0x16, 0x82, 0x43, 0x43, 0xbe, 0xfe, 0x7c, 0x0e, 0xde, 0x33,
	0x72, 0xba, 0x58, 0x1b, 0xba, 0x9f, 0x08, 0x36, 0x2f, 0x18, 0x7f, 0x02, 0x10, 0xd7, 0x23, 0xfc,
	0x9a, 0xde, 0x97, 0xe6, 0x1d, 0xbd, 0xfe, 0x8b, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x28, 0xb7,
	0xf4, 0x70, 0x94, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthClient interface {
	GetPublicKey(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PublicKey, error)
	LoginUser(ctx context.Context, in *Login, opts ...grpc.CallOption) (*SignedToken, error)
	VerifyToken(ctx context.Context, in *SignedToken, opts ...grpc.CallOption) (*Token, error)
	RenewToken(ctx context.Context, in *SignedToken, opts ...grpc.CallOption) (*SignedToken, error)
}

type authClient struct {
	cc *grpc.ClientConn
}

func NewAuthClient(cc *grpc.ClientConn) AuthClient {
	return &authClient{cc}
}

func (c *authClient) GetPublicKey(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PublicKey, error) {
	out := new(PublicKey)
	err := c.cc.Invoke(ctx, "/auth.Auth/GetPublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) LoginUser(ctx context.Context, in *Login, opts ...grpc.CallOption) (*SignedToken, error) {
	out := new(SignedToken)
	err := c.cc.Invoke(ctx, "/auth.Auth/LoginUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) VerifyToken(ctx context.Context, in *SignedToken, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/auth.Auth/VerifyToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) RenewToken(ctx context.Context, in *SignedToken, opts ...grpc.CallOption) (*SignedToken, error) {
	out := new(SignedToken)
	err := c.cc.Invoke(ctx, "/auth.Auth/RenewToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
type AuthServer interface {
	GetPublicKey(context.Context, *Empty) (*PublicKey, error)
	LoginUser(context.Context, *Login) (*SignedToken, error)
	VerifyToken(context.Context, *SignedToken) (*Token, error)
	RenewToken(context.Context, *SignedToken) (*SignedToken, error)
}

func RegisterAuthServer(s *grpc.Server, srv AuthServer) {
	s.RegisterService(&_Auth_serviceDesc, srv)
}

func _Auth_GetPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/GetPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetPublicKey(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Login)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/LoginUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).LoginUser(ctx, req.(*Login))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_VerifyToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).VerifyToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/VerifyToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).VerifyToken(ctx, req.(*SignedToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_RenewToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).RenewToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/RenewToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).RenewToken(ctx, req.(*SignedToken))
	}
	return interceptor(ctx, in, info, handler)
}

var _Auth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "auth.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPublicKey",
			Handler:    _Auth_GetPublicKey_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _Auth_LoginUser_Handler,
		},
		{
			MethodName: "VerifyToken",
			Handler:    _Auth_VerifyToken_Handler,
		},
		{
			MethodName: "RenewToken",
			Handler:    _Auth_RenewToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
